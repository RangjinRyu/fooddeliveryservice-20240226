Please implement for this Event Storming Model:

{"_type":"BoundedContext","aggregates":[{"aggregateRoot":{"_type":"AggregateRoot","fieldDescriptors":[{"className":"String","name":"orderId","displayName":"주문 ID","_type":"FieldDescriptor"},{"className":"String","name":"userId","displayName":"사용자 ID","_type":"FieldDescriptor"},{"className":"String","name":"restaurantId","displayName":"음식점 ID","_type":"FieldDescriptor"},{"className":"String","name":"menuId","displayName":"메뉴 ID","_type":"FieldDescriptor"},{"className":"Integer","name":"quantity","displayName":"수량","_type":"FieldDescriptor"},{"className":"String","name":"additionalRequirements","displayName":"추가 요구 사항","_type":"FieldDescriptor"},{"className":"Address","name":"deliveryAddress","displayName":"배송 주소","_type":"FieldDescriptor"},{"className":"String","name":"paymentMethod","displayName":"결제 방법","_type":"FieldDescriptor"},{"className":"String","name":"status","displayName":"상태","_type":"FieldDescriptor"},{"className":"statusType","name":"statusType","displayName":"상태 유형","_type":"FieldDescriptor"}]},"commands":[{"_type":"Command","fieldDescriptors":[{"className":"String","name":"userId","_type":"FieldDescriptor"},{"className":"String","name":"menuId","_type":"FieldDescriptor"},{"className":"Integer","name":"quantity","_type":"FieldDescriptor"},{"className":"String","name":"additionalRequirements","_type":"FieldDescriptor"},{"className":"Address","name":"deliveryAddress","_type":"FieldDescriptor"},{"className":"String","name":"paymentMethod","_type":"FieldDescriptor"}],"name":"PlaceOrder","displayName":"주문하기"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"restaurantId","_type":"FieldDescriptor"}],"name":"ConfirmOrder","displayName":"주문 확인하기"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"status","_type":"FieldDescriptor"}],"name":"UpdateOrderStatus","displayName":"주문 상태 업데이트하기"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"status","_type":"FieldDescriptor"}],"name":"UpdatePaymentStatus","displayName":"결제 상태 업데이트하기"}],"events":[{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"userId","_type":"FieldDescriptor"},{"className":"String","name":"menuId","_type":"FieldDescriptor"},{"className":"Integer","name":"quantity","_type":"FieldDescriptor"},{"className":"String","name":"additionalRequirements","_type":"FieldDescriptor"},{"className":"Address","name":"deliveryAddress","_type":"FieldDescriptor"},{"className":"String","name":"paymentMethod","_type":"FieldDescriptor"}],"name":"OrderPlaced","displayName":"주문 들어옴","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"restaurantId","_type":"FieldDescriptor"}],"name":"OrderConfirmed","displayName":"주문 확인됨","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"status","_type":"FieldDescriptor"}],"name":"OrderConfirmationUpdated","displayName":"주문 상태 업데이트됨","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"status","_type":"FieldDescriptor"}],"name":"PaymentCompleted","displayName":"결제 완료됨","_type":"Event"}],"name":"Order","displayName":"주문","_type":"Aggregate"}],"name":"order-management-and-payment","displayName":"주문 관리 및 결제","policies":[{"fieldDescriptors":[],"name":"OrderConfirmationPolicy","displayName":"주문 확인 정책","_type":"Policy"},{"fieldDescriptors":[],"name":"OrderStatusUpdatePolicy","displayName":"주문 상태 업데이트 정책","_type":"Policy"},{"fieldDescriptors":[],"name":"PaymentStatusUpdatePolicy","displayName":"결제 상태 업데이트 정책","_type":"Policy"}]}


I want to utilize following techniques:

- clean architecture
- spring-boot3
- spring-data-rest
- JPA (must use package jakarta.persistence.* instead of javax.persistence.*)
- H2 DB
- Lombok
- Kafka with spring-cloud-streams library 
- JUnit Test


SELF-CRITICISM: 
 - when you create pom.xml, USE correct parent project to spring boot 3
 - when you create pom.xml, you MUST specify the version: 3.1.3 ONLY for the spring-cloud-streams
 - Please generate start from pom.xml


when you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:

```
mvn [command] --no-transfer-progress
```

